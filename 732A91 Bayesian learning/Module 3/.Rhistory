}
cat('accept rate is: ',count/total_it)
return(theta_m)
}
samples <- RWM_Sampler(mode,0.4,log_nor,hessian,X=X2,y=Y,mu=mu,sigma1=sigma)
colMeans(samples)
mode
log_nor <- function(beta,X,y,mu,sigma1)
{
lambda <- exp(X%*%beta)
log_like <- sum(y*log(lambda)-lambda)
log_prior <- dmvnorm(t(beta),mu,sigma1,log = TRUE)
return (log_like+log_prior)
}
# X should not contain the target variable
# theta is a vector
RWM_Sampler <- function(theta,c,logPostFun,hessian,n_draws=1200,...)
{
theta_m <- matrix(0,nrow = n_draws,ncol=length(theta))
theta_m[1,] <- theta
count <- 2
total_it <- 0
while(count < n_draws)
{
total_it <- total_it+1
sample <- t(rmvnorm(1,mean=theta_m[count-1,],sigma = c*hessian))
up <- logPostFun(sample,...)
down <- logPostFun(theta_m[count-1,],...)
alpha <- min(1,exp(up-down))
if (runif(1) <= alpha)
{
theta_m[count,] <- sample
count <- count+1
}
}
cat('accept rate is: ',count/total_it)
return(theta_m)
}
samples <- RWM_Sampler(mode,0.7,log_nor,hessian,X=X2,y=Y,mu=mu,sigma1=sigma)
colMeans(samples)
mode
log_nor <- function(beta,X,y,mu,sigma1)
{
lambda <- exp(X%*%beta)
log_like <- sum(y*log(lambda)-lambda)
log_prior <- dmvnorm(t(beta),mu,sigma1,log = TRUE)
return (log_like+log_prior)
}
# X should not contain the target variable
# theta is a vector
RWM_Sampler <- function(theta,c,logPostFun,hessian,n_draws=1200,...)
{
theta_m <- matrix(0,nrow = n_draws,ncol=length(theta))
theta_m[1,] <- theta
count <- 2
total_it <- 0
while(count < n_draws)
{
total_it <- total_it+1
sample <- t(rmvnorm(1,mean=theta_m[count-1,],sigma = c*hessian))
up <- logPostFun(sample,...)
down <- logPostFun(theta_m[count-1,],...)
alpha <- min(1,exp(up-down))
if (runif(1) <= alpha)
{
theta_m[count,] <- sample
count <- count+1
}
}
cat('accept rate is: ',count/total_it)
return(theta_m)
}
samples <- RWM_Sampler(mode,0.55,log_nor,hessian,X=X2,y=Y,mu=mu,sigma1=sigma)
colMeans(samples)
mode
log_nor <- function(beta,X,y,mu,sigma1)
{
lambda <- exp(X%*%beta)
log_like <- sum(y*log(lambda)-lambda)
log_prior <- dmvnorm(t(beta),mu,sigma1,log = TRUE)
return (log_like+log_prior)
}
# X should not contain the target variable
# theta is a vector
RWM_Sampler <- function(theta,c,logPostFun,hessian,n_draws=1200,...)
{
theta_m <- matrix(0,nrow = n_draws,ncol=length(theta))
theta_m[1,] <- theta
count <- 2
total_it <- 0
while(count < n_draws)
{
total_it <- total_it+1
sample <- t(rmvnorm(1,mean=theta_m[count-1,],sigma = c*hessian))
up <- logPostFun(sample,...)
down <- logPostFun(theta_m[count-1,],...)
alpha <- min(1,exp(up-down))
if (runif(1) <= alpha)
{
theta_m[count,] <- sample
count <- count+1
}
}
cat('accept rate is: ',count/total_it)
return(theta_m)
}
samples <- RWM_Sampler(mode,0.55,log_nor,hessian,X=X2,y=Y,mu=mu,sigma1=sigma)
cat('The mean vector from random walk',colMeans(samples))
cat('The result from (b)'t(mode))
log_nor <- function(beta,X,y,mu,sigma1)
{
lambda <- exp(X%*%beta)
log_like <- sum(y*log(lambda)-lambda)
log_prior <- dmvnorm(t(beta),mu,sigma1,log = TRUE)
return (log_like+log_prior)
}
# X should not contain the target variable
# theta is a vector
RWM_Sampler <- function(theta,c,logPostFun,hessian,n_draws=1200,...)
{
theta_m <- matrix(0,nrow = n_draws,ncol=length(theta))
theta_m[1,] <- theta
count <- 2
total_it <- 0
while(count < n_draws)
{
total_it <- total_it+1
sample <- t(rmvnorm(1,mean=theta_m[count-1,],sigma = c*hessian))
up <- logPostFun(sample,...)
down <- logPostFun(theta_m[count-1,],...)
alpha <- min(1,exp(up-down))
if (runif(1) <= alpha)
{
theta_m[count,] <- sample
count <- count+1
}
}
cat('accept rate is: ',count/total_it,'\n')
return(theta_m)
}
samples <- RWM_Sampler(mode,0.55,log_nor,hessian,X=X2,y=Y,mu=mu,sigma1=sigma)
cat('The mean vector from random walk',colMeans(samples))
cat('The result from (b)',t(mode))
log_nor <- function(beta,X,y,mu,sigma1)
{
lambda <- exp(X%*%beta)
log_like <- sum(y*log(lambda)-lambda)
log_prior <- dmvnorm(t(beta),mu,sigma1,log = TRUE)
return (log_like+log_prior)
}
# X should not contain the target variable
# theta is a vector
RWM_Sampler <- function(theta,c,logPostFun,hessian,n_draws=1200,...)
{
theta_m <- matrix(0,nrow = n_draws,ncol=length(theta))
theta_m[1,] <- theta
count <- 2
total_it <- 0
while(count < n_draws)
{
total_it <- total_it+1
sample <- t(rmvnorm(1,mean=theta_m[count-1,],sigma = c*hessian))
up <- logPostFun(sample,...)
down <- logPostFun(theta_m[count-1,],...)
alpha <- min(1,exp(up-down))
if (runif(1) <= alpha)
{
theta_m[count,] <- sample
count <- count+1
}
}
cat('accept rate is: ',count/total_it,'\n')
return(theta_m)
}
samples <- RWM_Sampler(mode,0.55,log_nor,hessian,X=X2,y=Y,mu=mu,sigma1=sigma)
cat('The mean vector from random walk',colMeans(samples),'\n')
cat('The result from (b)',t(mode))
for (i in 1:9)
{
title <- paste('draw samples in dimention: ',i-1)
ylabel <- paste('beta',i-1)
plot(1:10000,samples[,i],main = title,xlab = 'iteration',ylab = ylabel,type = 'l')
lines(1:10000,rep(mean(samples[5000:10000,i]),10000),type = 'l',col='red')
}
for (i in 1:9)
{
title <- paste('draw samples in dimention: ',i-1)
ylabel <- paste('beta',i-1)
plot(1:1200,samples[,i],main = title,xlab = 'iteration',ylab = ylabel,type = 'l')
lines(1:1200,rep(mean(samples[400:1200,i]),1200),type = 'l',col='red')
}
for (i in 1:9)
{
title <- paste('draw samples in dimention: ',i-1)
ylabel <- paste('beta',i-1)
plot(1:1200,samples[,i],main = title,xlab = 'iteration',ylab = ylabel,type = 'l')
lines(1:1200,rep(mean(samples[1:1200,i]),1200),type = 'l',col='red')
}
samples[1200,]
log_nor <- function(beta,X,y,mu,sigma1)
{
lambda <- exp(X%*%beta)
log_like <- sum(y*log(lambda)-lambda)
log_prior <- dmvnorm(t(beta),mu,sigma1,log = TRUE)
return (log_like+log_prior)
}
# X should not contain the target variable
# theta is a vector
RWM_Sampler <- function(theta,c,logPostFun,hessian,n_draws=1200,...)
{
theta_m <- matrix(0,nrow = n_draws,ncol=length(theta))
theta_m[1,] <- theta
count <- 2
total_it <- 0
while(count <= n_draws)
{
total_it <- total_it+1
sample <- t(rmvnorm(1,mean=theta_m[count-1,],sigma = c*hessian))
up <- logPostFun(sample,...)
down <- logPostFun(theta_m[count-1,],...)
alpha <- min(1,exp(up-down))
if (runif(1) <= alpha)
{
theta_m[count,] <- sample
count <- count+1
}
}
cat('accept rate is: ',count/total_it,'\n')
return(theta_m)
}
samples <- RWM_Sampler(mode,0.55,log_nor,hessian,X=X2,y=Y,mu=mu,sigma1=sigma)
cat('The mean vector from random walk',colMeans(samples),'\n')
cat('The result from (b)',t(mode))
for (i in 1:9)
{
title <- paste('draw samples in dimention: ',i-1)
ylabel <- paste('beta',i-1)
plot(1:1199,samples[,i],main = title,xlab = 'iteration',ylab = ylabel,type = 'l')
lines(1:1199,rep(mean(samples[1:1199,i]),1199),type = 'l',col='red')
}
for (i in 1:9)
{
title <- paste('draw samples in dimention: ',i-1)
ylabel <- paste('beta',i-1)
plot(1:1199,samples[1199,i],main = title,xlab = 'iteration',ylab = ylabel,type = 'l')
lines(1:1199,rep(mean(samples[1:1199,i]),1199),type = 'l',col='red')
}
for (i in 1:9)
{
title <- paste('draw samples in dimention: ',i-1)
ylabel <- paste('beta',i-1)
plot(1:1199,samples[1:1199,i],main = title,xlab = 'iteration',ylab = ylabel,type = 'l')
lines(1:1199,rep(mean(samples[1:1199,i]),1199),type = 'l',col='red')
}
log_nor <- function(beta,X,y,mu,sigma1)
{
lambda <- exp(X%*%beta)
log_like <- sum(y*log(lambda)-lambda)
log_prior <- dmvnorm(t(beta),mu,sigma1,log = TRUE)
return (log_like+log_prior)
}
# X should not contain the target variable
# theta is a vector
n_draws = 3500
RWM_Sampler <- function(theta,c,logPostFun,hessian,n_draws=n_draws,...)
{
theta_m <- matrix(0,nrow = n_draws,ncol=length(theta))
theta_m[1,] <- theta
count <- 2
total_it <- 0
while(count <= n_draws)
{
total_it <- total_it+1
sample <- t(rmvnorm(1,mean=theta_m[count-1,],sigma = c*hessian))
up <- logPostFun(sample,...)
down <- logPostFun(theta_m[count-1,],...)
alpha <- min(1,exp(up-down))
if (runif(1) <= alpha)
{
theta_m[count,] <- sample
count <- count+1
}
}
cat('accept rate is: ',count/total_it,'\n')
return(theta_m)
}
samples <- RWM_Sampler(mode,0.55,log_nor,hessian,X=X2,y=Y,mu=mu,sigma1=sigma)
log_nor <- function(beta,X,y,mu,sigma1)
{
lambda <- exp(X%*%beta)
log_like <- sum(y*log(lambda)-lambda)
log_prior <- dmvnorm(t(beta),mu,sigma1,log = TRUE)
return (log_like+log_prior)
}
# X should not contain the target variable
# theta is a vector
n = 3500
RWM_Sampler <- function(theta,c,logPostFun,hessian,n_draws=n,...)
{
theta_m <- matrix(0,nrow = n_draws,ncol=length(theta))
theta_m[1,] <- theta
count <- 2
total_it <- 0
while(count <= n_draws)
{
total_it <- total_it+1
sample <- t(rmvnorm(1,mean=theta_m[count-1,],sigma = c*hessian))
up <- logPostFun(sample,...)
down <- logPostFun(theta_m[count-1,],...)
alpha <- min(1,exp(up-down))
if (runif(1) <= alpha)
{
theta_m[count,] <- sample
count <- count+1
}
}
cat('accept rate is: ',count/total_it,'\n')
return(theta_m)
}
samples <- RWM_Sampler(mode,0.55,log_nor,hessian,X=X2,y=Y,mu=mu,sigma1=sigma)
cat('The mean vector from random walk',colMeans(samples),'\n')
cat('The result from (b)',t(mode))
n_draw <- n_draws-1
for (i in 1:9)
{
title <- paste('draw samples in dimention: ',i-1)
ylabel <- paste('beta',i-1)
plot(1:n_draw,samples[1:n_draw,i],main = title,xlab = 'iteration',ylab = ylabel,type = 'l')
lines(1:n_draw,rep(mean(samples[1:n_draw,i]),n_draw),type = 'l',col='red')
}
mode
log_nor <- function(beta,X,y,mu,sigma1)
{
lambda <- exp(X%*%beta)
log_like <- sum(y*log(lambda)-lambda)
log_prior <- dmvnorm(t(beta),mu,sigma1,log = TRUE)
return (log_like+log_prior)
}
# X should not contain the target variable
# theta is a vector
n = 3500
RWM_Sampler <- function(theta,c,logPostFun,hessian,n_draws=3500,...)
{
theta_m <- matrix(0,nrow = n_draws,ncol=length(theta))
theta_m[1,] <- theta
count <- 2
total_it <- 0
while(count <= n_draws)
{
total_it <- total_it+1
sample <- t(rmvnorm(1,mean=theta_m[count-1,],sigma = c*hessian))
up <- logPostFun(sample,...)
down <- logPostFun(theta_m[count-1,],...)
alpha <- min(1,exp(up-down))
if (runif(1) <= alpha)
{
theta_m[count,] <- sample
count <- count+1
}
}
cat('accept rate is: ',count/total_it,'\n')
return(theta_m)
}
samples <- RWM_Sampler(t(mu),0.55,log_nor,hessian,X=X2,y=Y,mu=mu,sigma1=sigma)
cat('The mean vector from random walk',colMeans(samples),'\n')
cat('The result from (b)',t(mode))
n_draw <- n_draws-1
for (i in 1:9)
{
title <- paste('draw samples in dimention: ',i-1)
ylabel <- paste('beta',i-1)
plot(1:n_draw,samples[1:n_draw,i],main = title,xlab = 'iteration',ylab = ylabel,type = 'l')
lines(1:n_draw,rep(mean(samples[1:n_draw,i]),n_draw),type = 'l',col='red')
}
n_draw <- n_draws-1
for (i in 1:9)
{
title <- paste('draw samples in dimension: ',i-1)
ylabel <- paste('beta',i-1)
plot(1:n_draw,samples[1:n_draw,i],main = title,xlab = 'iteration',ylab = ylabel,type = 'l')
lines(1:n_draw,rep(mean(samples[1:n_draw,i]),n_draw),type = 'l',col='red')
}
colnames(X)
?rpois
length(situation)
# situation include constant 1
situation <- c(1,1,0,1,0,1,0,1.2,0.8)
# situation include constant 1
length(situation)
situation%*%t(beta)
beta
samples
beta <- samples
situation%*%t(beta)
a <- situation%*%t(beta)
View(a)
situation
situation%*%situation
situation%*%t(situation)
# situation include constant 1
situation <- c(1,1,0,1,0,1,0,1.2,0.8)
beta <- samples
a <- t(situation)%*%t(beta)
View(a)
View(a)
length(a)
# situation include constant 1
situation <- c(1,1,0,1,0,1,0,1.2,0.8)
beta <- samples
a <- t(situation)%*%t(beta)
data <- c()
for (i in 1:length(a))
{
data <- c(data,rpois(1,exp(a[1,i])))
}
data
# situation include constant 1
situation <- c(1,1,0,1,0,1,0,1.2,0.8)
beta <- samples
a <- t(situation)%*%t(beta)
data <- c()
for (i in 1:length(a))
{
data <- c(data,rpois(1,exp(a[1,i])))
}
hist(data,bins=40)
# situation include constant 1
situation <- c(1,1,0,1,0,1,0,1.2,0.8)
beta <- samples
a <- t(situation)%*%t(beta)
data <- c()
for (i in 1:length(a))
{
data <- c(data,rpois(1,exp(a[1,i])))
}
hist(data,bins=6)
# situation include constant 1
situation <- c(1,1,0,1,0,1,0,1.2,0.8)
beta <- samples
a <- t(situation)%*%t(beta)
data <- c()
for (i in 1:length(a))
{
data <- c(data,rpois(1,exp(a[1,i])))
}
hist(data,bins=5)
?hist
# situation include constant 1
situation <- c(1,1,0,1,0,1,0,1.2,0.8)
beta <- samples
a <- t(situation)%*%t(beta)
data <- c()
for (i in 1:length(a))
{
data <- c(data,rpois(1,exp(a[1,i])))
}
hist(data,freq=FALSE,breaks = 5)
# situation include constant 1
situation <- c(1,1,0,1,0,1,0,1.2,0.8)
beta <- samples
a <- t(situation)%*%t(beta)
data <- c()
for (i in 1:length(a))
{
data <- c(data,rpois(1,exp(a[1,i])))
}
hist(data,freq=FALSE,breaks = 10)
# situation include constant 1
situation <- c(1,1,0,1,0,1,0,1.2,0.8)
beta <- samples
a <- t(situation)%*%t(beta)
data <- c()
for (i in 1:length(a))
{
data <- c(data,rpois(1,exp(a[1,i])))
}
hist(data,freq=FALSE,breaks = 6)
# situation include constant 1
situation <- c(1,1,0,1,0,1,0,1.2,0.8)
beta <- samples
a <- t(situation)%*%t(beta)
data <- c()
for (i in 1:length(a))
{
data <- c(data,rpois(1,exp(a[1,i])))
}
hist(data,freq=FALSE,breaks = 7)
unique(data)
# situation include constant 1
situation <- c(1,1,0,1,0,1,0,1.2,0.8)
beta <- samples
a <- t(situation)%*%t(beta)
data <- c()
for (i in 1:length(a))
{
data <- c(data,rpois(1,exp(a[1,i])))
}
hist(data,freq=FALSE,breaks = length(unique(data)),main = 'bids of given observation')
data==0
sum(data==0)/sum(data!=0)
sum(data==0)/length(data)
# situation include constant 1
situation <- c(1,1,0,1,0,1,0,1.2,0.8)
beta <- samples
a <- t(situation)%*%t(beta)
data <- c()
for (i in 1:length(a))
{
data <- c(data,rpois(1,exp(a[1,i])))
}
hist(data,freq=FALSE,breaks = length(unique(data)),main = 'bids of given observation')
cat('the probability of no bid is:',sum(data==0)/length(data))
